program:
  precision highp float;
  precision highp int;

  #include <lighting.h>
  #include <common.h>

  varying vec3 Position;
  varying vec2 TexCoord;
  varying vec3 Normal;

technique:
  pass:
    vertexShader:

      // semantic : position
      attribute vec3 vertexPosition;
      // semantic : normal
      attribute vec3 vertexNormal;
      // semantic : texture
      attribute vec2 vertexUV;

      void main(void) {
        vec4 pos = worldMat4 * vec4(vertexPosition, 1.0);

        Position = pos.xyz;
        TexCoord = vertexUV * vec2(1.0, -1.0);
        Normal = mat3(worldMat4) * vertexNormal;

        gl_Position = projMat4 * viewMat4 * pos;
      }
    fragmentShader:
      void main(void) {
        vec3 color = texture2D(diffuseTex, TexCoord).rgb * diffuse;
        vec3 gray = dot(color, vec3(0.3, 0.59, 0.11)) * specular;
        gl_FragColor = vec4(evaluateLights(Position.xyz, normalize(Normal), color, specular,  specularPower) + ambient * color, alpha);
      }

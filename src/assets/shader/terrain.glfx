program:
  precision highp float;
  precision highp int;

  #include <lib/common.h>
  #include <lib/lighting.h>
  #include <lib/terrain/splatting.h>

  varying vec3 Position;
  varying vec4 EyePosition;
  varying vec2 TexCoord;
  varying vec3 EyeVector;
  varying vec3 Normal;

technique:
  pass:
    vertexShader:

      // @binding position
      attribute vec3 vertexPosition;
        
      // @binding normal
      attribute vec3 vertexNormal;

      // @binding texture
      attribute vec2 vertexUV;

      void main(void) {
        vec4 pos = worldMat4 * vec4(vertexPosition, 1.0);

        Position = pos.xyz;
        TexCoord = vertexUV;
        Normal = mat3(worldMat4) * vertexNormal;

        gl_Position = projMat4 * viewMat4 * pos;
      }
    fragmentShader:
      void main(void) {
        vec4 splat = texture2D(textureSplat, TexCoord);
        float slope = BlendSlope(1.0 - Normal.y, TexCoord);
        vec3 color = splatColor(TexCoord.xyxy * 64.0, splat, slope).rgb;

        float specIntensity = dot(color.rgb, vec3(0.3, 0.59, 0.11));
        vec3 eye = normalize(Position - cameraPosition);
        vec3 normal = normalize(Normal);

        vec3 light = evaluateLights(Position.xyz, normal, color, specIntensity * specular,  specularPower);
        gl_FragColor = vec4(light + ambient * color, 1);
      }

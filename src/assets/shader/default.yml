program:
  precision highp float;
  precision highp int;

  #include <lib/lighting.h>
  #include <lib/common.h>

  // @binding position
  attribute vec3 vertexPosition;

  // @binding normal
  attribute vec3 vertexNormal;

  // @binding texture
  attribute vec2 vertexUV;

  // @binding tangent
  attribute vec3 vertexTangent;

  // @binding bitangent
  attribute vec3 vertexBiTangent;

  varying vec3 Position;
  varying vec4 EyePosition;
  varying vec2 TexCoord;
  varying vec3 EyeVector;
  varying mat3 TTW; // Tangent to world

technique:
  pass:
    vertexShader:
      void main(void) {
        vec4 pos = worldMat4 * vec4(vertexPosition, 1.0);

        Position = pos.xyz;
        TexCoord = vertexUV;

        TTW[0] = vertexTangent;
        TTW[1] = vertexBiTangent;
        TTW[2] = vertexNormal;
        TTW = mat3(worldMat4) * TTW;

        gl_Position = projMat4 * viewMat4 * pos;
      }
    fragmentShader:
      void main(void) {
        vec3 color = texture2D(diffuseTex, TexCoord).rgb * diffuse;
        vec3 gray = dot(color, vec3(0.3, 0.59, 0.11)) * specular;
        vec3 eye = normalize(Position - cameraPosition);
        vec3 normal = texture2D(normalTex, TexCoord).rgb * 2.0 - vec3(1.0);
        normal = normalize(TTW * normal);
        gl_FragColor = vec4(evaluateLights(Position.xyz, normal, color, specular,  specularPower) + ambient * color, alpha);
      }

//- ignore: true
doctype html
html(lang="en")
  head
    link(rel="stylesheet" href="/style.css")
    script(type='text/javascript' src='https://code.jquery.com/jquery-2.1.4.min.js')
    script(type='text/javascript' src='https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js')
    script(type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.5.1/dat.gui.min.js')
    script(type='text/javascript' src='/scripts/glib.js')

    style().
      #canvas {
        padding:0;
      }
      #example-content {
        width:850px;
      }
      pre {
        display: inline-block;
        overflow: hidden;
      }
      .dg.main {
        width: 100% !important;
      }
      .dg.main .close-button {
        top: 0;
        right: 0;
        position: relative;
        font-size: inherit;
        width: 100% !important;
      }

    script.
      var demoGuiInstance = null;
      demoGui = function(callback){
        if (!demoGuiInstance) {
          demoGuiInstance = new dat.GUI({autoPlace: false});
          var guiContainer = document.getElementById('dat-gui');
          guiContainer.appendChild(demoGuiInstance.domElement);
        }
        callback(demoGuiInstance);
      };



block head
body.grid-frame
  .grid-block.vertical
    .grid-block.shrink.dark.title-bar
      spab Glib Framework
    .grid-block.horizontal
      .grid-block.vertical.shrink(style='width:250px;')
        each section, index in sections
          section.grid-content.block-list.small-12
            header= section.title
            ul
              each page in section.pages
                li: a(href=page.href)=page.title
      .grid-block.vertical
        .grid-content
          pre(style='overflow-y:hidden; min-width:600px;')
            code.prettyprint#example-code
      .grid-block.vertical.shrink#example-content
        block content
          canvas#canvas.thumbnail(width=800 height=450)
        #dat-gui

  #example-scripts
    block script
  script(type='text/javascript').
    var entityMap = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': '&quot;',
      "'": '&#39;',
      "/": '&#x2F;'
    };
    function escapeHtml(string) {
      return String(string).replace(/[&<>"'\/]/g, function (s) {
        return entityMap[s];
      });
    }
    function removeIndents(string) {
      var lines = string.split("\n");
      var min = 10;
      for (var i = 0; i<lines.length; i++){
        var line = lines[i];
        if (!line) continue;
        var match = line.match(/^(\s+)/)
        if (!match) return string;
        min = Math.min(min, match[1].length);
      }
      for (var i = 0; i<lines.length; i++){
        var line = lines[i];
        if (!line) continue;
        lines[i] = line.substring(min);
      }
      return lines.join("\n");
    }
    var text = removeIndents($('#example-content').html()) + "\n" + removeIndents($('#example-scripts').html());
    $('#example-code').html(escapeHtml(text));


//- title: Shader
extends ./../_layouts/default.jade
block script
  script#shader(type='text/ymlsl').
    program:
      precision highp float;
      precision highp int;
      // semantic : position
      attribute vec3 vertexPosition;
      // semantic : time
      // default  : 0
      uniform float passedTime;
      varying vec4 Color;
    technique:
      pass:
        vertexShader:
          void main(void) {
            float t = sin(passedTime);
            Color.r = sin(passedTime * 1.0);
            Color.g = sin(passedTime * 2.0);
            Color.b = sin(passedTime * 3.0);
            Color.a = vertexPosition.x;
            Color = Color * 0.5 + 0.5;
            gl_Position = vec4(vertexPosition, 1.0);
          }
        fragmentShader:
          void main(void) {
            float a = sin(Color.a - passedTime * 2.0) * 0.5 + 1.0;
            gl_FragColor = vec4(Color.rgb * a, 1.0);
          }
  script(type='text/javascript').
    var device = new Glib.Graphics.Device({canvas: 'canvas'});
    var shaderCode = document.getElementById('shader').textContent;
    var shaderCollection = Glib.utils.parseYamlShader(shaderCode);
    var shader = shaderCollection.techniques[0].passes[0];
    var program = device.createProgram(shader);
    self.device = device;
    function loop() {
      program.uniforms.time.set(Glib.utils.getTime() * 0.001);
      device.program = program;
      device.drawQuad();
      Glib.utils.requestFrame(loop);
    }
    loop();

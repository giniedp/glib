extends ./../_layouts/default.jade
block content
  pre
    code.prettyprint#debug-container

  .thumbnail(style="padding:20px")
    canvas#canvas(width="800" height="400")
block script
  script(type='text/javascript').
    game = Glib
      .createGame({
        canvas: document.getElementById("canvas"),
        autorun: true
      })
      .buildChild({
        name: "Camera",
        templates: ["Camera", "WASD"]
      }, function(entity){
        entity.getService("Camera").activate();
        entity.getService("Transform").translateXYZ(0, 0, 5);
      })
      .buildChild({
        name: "Light",
        templates: ["DirectionalLight"]
      })
      .addComponent({
        setup: function(){
          var assets = this.node.root.getService("Assets");
          assets.downloadPackage({
            url: '/assets/package.json'
          }).then(addChildren);
        }
      });

      function DemoComponent(options){
        options = options || {};
        this.index = options.index || 0;
        this.enable = true;
        this.visible = true;
      }
      DemoComponent.prototype.setup = function(){
        this.time = this.node.root.getService("Time");
        this.assets = this.node.root.getService("Assets");
        this.transform = this.node.getService("Transform");
        this.renderable = this.node.getService("Renderable");
        this.assets
          .load("Model", "/assets/models/cube.json")
          .then(function (model) {
            this.renderable.model = model;
          }.bind(this));
      };
      DemoComponent.prototype.update = function(time){
        var t = (this.index / totalItems + this.time.totalMsInGame / 1000) * Math.PI;
        this.transform.setPositionXYZ(this.index * 3 - totalItems / 2 * 3, Math.sin(t) * 2, -totalItems / 2 * 3);
        this.transform.setScaleUniform(1.0 + Math.sin(t) * 0.5);
        this.transform.setRotationXYZAngle(1, 0, 0, t);
      };

      var totalItems = 20;
      function addChildren(){
        for (var i = 1; i <= totalItems; i++) {
          game.buildChild({
            name: "Model" + i,
            templates: ["Model"]
          }, function(entity){
            entity.addComponent(new DemoComponent({ index: i }));
          });
        }
      }


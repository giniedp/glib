//- title: States - StencilState
extends ./../../_layouts/example
block script
  script#vertex-shader(type='text/glsl').
    precision highp float;
    precision highp int;
    // @binding position
    attribute vec3 vPosition;
    void main(void) {
      gl_Position = vec4(vPosition, 1);
    }
  script#fragment-shader(type='text/glsl').
    precision highp float;
    precision highp int;
    uniform vec3 color;
    void main(void) {
      gl_FragColor = vec4(color, 1);
    }
  script(type='text/javascript').
    var Graphics = Glib.Graphics;
    var device = new Graphics.Device({
      canvas: 'canvas',
      contextAttributes: { stencil: true }
    });
    self.device = device;

    var width = device.canvas.width;
    var height = device.canvas.height;
    var vars = {
      stripes: 10,
      stencilStart: 0
    };
    Glib.utils.loop(function(){
      var stripes = vars.stripes;
      var step = height / stripes;
      var clearStencils = vars.stencilStart;

      device.scissorState = {enable: true, x: 0, y: 0, width: width, height: step};
      for (var i = 0; i < stripes; i++) {
        device.scissorState = {y: i * step};
        device.clear(0xFF000000, 1, clearStencils);
        clearStencils += 1;
      }
      device.scissorState = {enable: false};

      device.program = device.createProgram({
        vertexShader: document.getElementById('vertex-shader').textContent,
        fragmentShader: document.getElementById('fragment-shader').textContent
      });

      device.stencilState = {
        enable: true,
        stencilFunction: Graphics.CompareFunction.Equal,
        stencilBackFunction: Graphics.CompareFunction.Equal
      };
      for (var i = 0; i < stripes; i++) {
        device.stencilState = {
          stencilReference: i,
          stencilBackReference: i
        };
        device.program.setUniform("color", {
          x: i / stripes,
          y: i / stripes,
          z: i / stripes
        });
        device.drawQuad();
      }
    });

    demoGui(function(gui){
      gui.add(vars, 'stripes').min(1).max(100).step(1);
    });




//- title: Render targets
//- weight: 8
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode
  a(name="VS" index=2)
  script#vertex-shader(type='text/glsl').
    precision highp float;

    // @binding position
    attribute vec3 vPosition;
    // @binding texture
    attribute vec2 vTexture;

    // @binding world
    uniform mat4 uWorld;
    // @binding view
    uniform mat4 uView;
    // @binding projection
    uniform mat4 uProjection;

    // data for fragment stage
    varying vec2 texCoord;

    void main(void) {
      vec4 pos = uWorld * vec4(vPosition, 1.0);
      texCoord = vTexture;
      gl_Position = uProjection * uView * pos;
    }

  a(name="FS" index=2)
  script#fragment-shader(type='text/glsl').
    precision highp float;
    // @binding texture
    uniform sampler2D uTexture;
    // data from vertex stage
    varying vec2 texCoord;

    void main(void) {
      gl_FragColor = texture2D(uTexture, texCoord);
    }
    
  a(name="JS" index=1)
  script(type='text/javascript').
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });
    
    var triangle = {
      indices: device.createIndexBuffer({
        data: [0, 1, 2]        
      }),
      vertices: device.createVertexBuffer({
        layout: Glib.Graphics.VertexLayout.create('PositionTexture'),
        data: [
        //    POSITION      TEXTURE
        //  X     Y    Z     U  V   
          -0.5, -0.5, 0.0,   0, 1,
           0.5, -0.5, 0.0,   1, 1,
           0.0,  0.5, 0.0,   0.5, 0,
        ]
      })
    };
    var rectangle = {
      indices: device.createIndexBuffer({
        data: [0, 1, 2, 1, 2, 3]
      }),
      vertices: device.createVertexBuffer({
        layout: Glib.Graphics.VertexLayout.create('PositionTexture'),
        data: [
        //    POSITION      TEXTURE
        //  X     Y    Z     U  V   
          -0.5, -0.5, 0.0,   0, 1,
           0.5, -0.5, 0.0,   1, 1,
          -0.5,  0.5, 0.0,   0, 0,
           0.5,  0.5, 0.0,   1, 0
        ]
      })
    };

    var texture = device.createTexture({
      data: '/assets/textures/proto_red.png' 
    });
    var renderTarget = device.createRenderTarget({
      width: 512,
      height: 512,
      depthFormat: Glib.Graphics.DepthFormat.DepthStencil
    });

    var world = Glib.Mat4.identity();
    var view = Glib.Mat4.identity();
    var proj = Glib.Mat4.identity();

    var time = 0;
    Glib.utils.loop(function(dt) {
      time += dt;
      

      device.resize();

      device.setRenderTarget(renderTarget);
      device.clear(0xFFFFFFFF, 1.0);

      device.vertexBuffer = triangle.vertices;
      device.indexBuffer = triangle.indices;
      device.program = program;
      
      world.initRotationZ(Math.PI * 2 * time / 2000);
      view.initTranslation(0, 0, -1);
      proj.initPerspectiveFieldOfView(Math.PI/2, device.drawingBufferAspectRatio, 0, 100);
      
      program.setUniform("world", world);
      program.setUniform("view", view);
      program.setUniform("projection", proj);
      program.setUniform("texture", texture);

      device.drawIndexedPrimitives();

      device.setRenderTarget(null);
      device.clear(Glib.Color.CornflowerBlue, 1.0);

      device.vertexBuffer = rectangle.vertices;
      device.indexBuffer = rectangle.indices;
      device.program = program;
      
      world.initRotationY(Math.PI * 2 * time / 10000);
      view.initTranslation(0, 0, -1);
      proj.initPerspectiveFieldOfView(Math.PI/2, device.drawingBufferAspectRatio, 0, 100);

      program.setUniform("world", world);
      program.setUniform("view", view);
      program.setUniform("projection", proj);
      program.setUniform("texture", renderTarget);

      device.drawIndexedPrimitives();
    });

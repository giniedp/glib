//- title: Rectangle colored
//- weight: 3
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode
  
  a(name="GLSL" index=2)
  .grid-content
    dl.mt.no-mb
      dt Vertex shader
      dd.no-mb 
        | The vertex shader again uses the vertex position without any transformation.
        | Additionally passes the vertex color to the fragment stage

  script#vertex-shader(type='text/glsl').
    precision highp float;
    attribute vec3 vPosition;
    attribute vec3 vColor;
    varying vec3 vertexColor;
    void main(void) {
      vertexColor = vColor;
      gl_Position = vec4(vPosition, 1.0);
    }

  .grid-content
    dl.mt.no-mb
      dt Fragment shader
      dd.no-mb 
        | Takes the vertex color from the fragment stage and renders the pixel with that color.

  script#fragment-shader(type='text/glsl').
    precision highp float;
    varying vec3 vertexColor;
    void main(void) {
      gl_FragColor = vec4(vertexColor.rgb, 1.0);
    }
    
  a(name="JS" index=1)
  .grid-content
    dl.mt.no-mb
      dt Remarks
      dd.no-mb 
        | The example is similar to the Colored triangle example.
        | The difference is that now an index buffer is used to define
        | the drawing order of the vertices. The distinct parts of the code are
        | commented.
  script(type='text/javascript').
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });
    
    var vertices = device.createVertexBuffer({
      // the layout is the same as in previous example
      layout: {
        vPosition: { type: "float", offset: 0, elements: 3  },
        vColor: { type: "float", offset: 12, elements: 3 }
      },
      // A rectangle needs one more vertex compared to a triangle
      data: [
      //  X  |  Y  | Z     R | G | B
        -0.5, -0.5, 0.0,   1,  0,  0, // The red vertex
         0.5, -0.5, 0.0,   0,  1,  0, // The green vertex
        -0.5,  0.5, 0.0,   0,  0,  1, // The blue vertex
         0.5,  0.5, 0.0,   1,  1,  1, // The white vertex
      ]
    });


    var indices = device.createIndexBuffer({
      type: 'ushort',
      data: [
        0, 1, 2, // the first triangle 
        1, 2, 3  // the second triangle
      ]
    });

    Glib.utils.loop(function() {
      device.resize();
      device.clear(Glib.Color.CornflowerBlue);
      
      device.program = program;
      device.vertexBuffer = vertices;

      // Also set the index buffer
      device.indexBuffer = indices;
      // Now call drawIndexedPrimitives. This is similar to 'drawPrimitives'
      // but utilizes the index buffer.
      device.drawIndexedPrimitives('TriangleList', 0, 6);
    });

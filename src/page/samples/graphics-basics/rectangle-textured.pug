//- title: Rectangle textured
//- weight: 5
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode
  
  a(name="GLSL" index=2)
  .grid-content
    dl.mt.no-mb
      dt Vertex shader
      dd.no-mb 
        | The vertex shader again uses the vertex position without any transformation.
        | Additionally passes the texture coordinate to the fragment stage.

  script#vertex-shader(type='text/glsl').
    precision highp float;
    attribute vec3 vPosition;
    attribute vec2 vTexture;
    varying vec2 texCoord;
    void main(void) {
      texCoord = vTexture;
      gl_Position = vec4(vPosition, 1.0);
    }

  .grid-content
    dl.mt.no-mb
      dt Fragment shader
      dd.no-mb 
        | Reads the color from texture and renders the pixel with that color.

  script#fragment-shader(type='text/glsl').
    precision highp float;
    uniform sampler2D uTexture;
    varying vec2 texCoord;
    void main(void) {
      gl_FragColor = vec4(texture2D(uTexture, texCoord).rgb, 1.0);
    }
    
  a(name="JS" index=1)
  script(type='text/javascript').
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });
    
    var vertices = device.createVertexBuffer({
      layout: {
        vPosition: { type: "float", offset: 0, elements: 3  },
        vTexture: { type: "float", offset: 12, elements: 2  }
      },
      data: [
      //  X  |  Y  | Z     U  V   
        -0.5, -0.5, 0.0,   0, 1,
         0.5, -0.5, 0.0,   1, 1,
        -0.5,  0.5, 0.0,   0, 0,
         0.5,  0.5, 0.0,   1, 0
      ]
    });
    var indices = device.createIndexBuffer({
      type: 'ushort',
      data: [0, 1, 2, 1, 2, 3]
    });

    // Create a texture object
    var texture = device.createTexture({
      // data is simply an URL to the image
      data: '/assets/textures/proto_red.png'
    });

    Glib.utils.loop(function() {
      device.resize();
      device.clear(Glib.Color.CornflowerBlue);
      
      // Set the 'uTexture' uniform
      program.setUniform('uTexture', texture);

      device.program = program;
      device.indexBuffer = indices;
      device.vertexBuffer = vertices;
      device.drawIndexedPrimitives('TriangleList', 0, 6);
    });

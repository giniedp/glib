//- title: Textures
//- weight: 7
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode
  .grid-container
    p The following images and videos are used as textures in the example
  .grid-container(example)
    img.sample-texture(src='/assets/textures/proto_red.png' width='90' height='90')
    img.sample-texture(src='/assets/textures/proto_green.png' width='90' height='90')
    img.sample-texture(src='/assets/textures/proto_blue.png' width='90' height='90')
    video.sample-texture(src='/assets/videos/big-buck-bunny.mp4' width='160' height='90')

  a(name="VS" index=2)
  script#vertex-shader(type='text/glsl').
    precision highp float;

    // @binding position
    attribute vec3 vPosition;
    // @binding texture
    attribute vec2 vTexture;

    // @binding world
    uniform mat4 uWorld;
    // @binding view
    uniform mat4 uView;
    // @binding projection
    uniform mat4 uProjection;

    // data for fragment stage
    varying vec2 texCoord;

    void main(void) {
      vec4 pos = uWorld * vec4(vPosition, 1.0);
      texCoord = vTexture;
      gl_Position = uProjection * uView * pos;
    }

  a(name="FS" index=2)
  script#fragment-shader(type='text/glsl').
    precision highp float;
    // @binding texture
    uniform sampler2D uTexture;
    // data from vertex stage
    varying vec2 texCoord;

    void main(void) {
      gl_FragColor = texture2D(uTexture, texCoord);
    }
    
  a(name="JS" index=1)
  script(type='text/javascript').
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });
    
    var vertices = device.createVertexBuffer({
      layout: Glib.Graphics.VertexLayout.create('PositionTexture'),
      data: [
      //    POSITION      TEXTURE
      //  X     Y    Z     U  V   
        -0.5, -0.5, 0.0,   0, 1,
         0.5, -0.5, 0.0,   1, 1,
        -0.5,  0.5, 0.0,   0, 0,
         0.5,  0.5, 0.0,   1, 0
      ]
    });
    var indices = device.createIndexBuffer({
      type: 'ushort',
      data: [0, 1, 2, 1, 2, 3]
    });

    // find all textures and video elements in this html document
    var texturesInDom = document.getElementsByClassName('sample-texture');
    // generate an array of textures
    var texturesFromDom = [];
    for (var i = 0; i < texturesInDom.length; i++) {
      texturesFromDom.push(device.createTexture({ data: texturesInDom.item(i) }));
    }

    // an array of image and video urls
    var textureUrls = [
      '/assets/textures/proto_red.png',
      '/assets/textures/proto_green.png',
      '/assets/textures/proto_blue.png',
      '/assets/videos/big-buck-bunny.mp4'
    ];
    // generate an array of textures
    var texturesFromUrls = textureUrls.map(function(url) {
      return device.createTexture({ data: url });
    })

    // start video playback on video textures
    texturesFromDom.forEach(function(texture) {
      if (texture.video) {
        texture.video.oncanplay = function() {
          texture.video.volume = 0; 
          texture.video.play();
        }
      }
    });
    texturesFromUrls.forEach(function(texture) {
      if (texture.video) {
        texture.video.oncanplay = function() {
          texture.video.volume = 0;
          texture.video.play();
        }
      }
    });

    var texturesFromData = [];
    texturesFromData.push(device.createTexture({
      width: 2,
      height: 2,
      pixelFormat: 'RGBA',
      pixelType: 'ubyte',
      data: [
        0xFF, 0x00, 0x00, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x00, 0x00, 0xFF
      ]
    }));
    texturesFromData.push(device.createTexture({
      width: 2,
      height: 2,
      pixelFormat: 'RGBA',
      pixelType: 'ubyte',
      data: [
        0x00, 0xFF, 0x00, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0xFF, 0x00, 0xFF
      ]
    }));
    
    texturesFromData.push(device.createTexture({
      width: 2,
      height: 2,
      pixelFormat: 'RGBA',
      pixelType: 'ubyte',
      data: [
        0x00, 0x00, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0xFF, 0xFF
      ]
    }));
    texturesFromData.push(device.createTexture({
      width: 2,
      height: 2,
      pixelFormat: 'RGBA',
      pixelType: 'ubyte',
      data: [
        0x00, 0x00, 0x00, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0xFF
      ]
    }));

    var world = Glib.Mat4.identity();
    var view = Glib.Mat4.identity();
    var proj = Glib.Mat4.identity();

    Glib.utils.loop(function(dt) {
      // Resize and clear backbuffer 
      device.resize();
      device.clear(Glib.Color.CornflowerBlue, 1.0);

      // Set current rendering objects
      device.program = program;
      device.indexBuffer = indices;
      device.vertexBuffer = vertices;

      // update view and projection matrices
      var aspect = device.context.drawingBufferWidth / device.context.drawingBufferHeight;
      view.initTranslation(0, 0, -1);  
      proj.initPerspectiveFieldOfView(Math.PI/2, aspect, 0, 100);
      // update view and projection matrices in shader
      program.setUniform('view', view);
      program.setUniform('projection', proj);

      var rows = [
        texturesFromDom,
        texturesFromUrls,
        texturesFromData
      ]; 
      for (var i=0; i < rows.length; i++) {
        var cols = rows[i];
        for (var j=0; j < cols.length; j++) {
          var texture = cols[j]; 
          
          world.initTranslation(
            -0.5*cols.length + j + 0.5,
            +0.5*rows.length - i - 0.5, 
            -1
          );

          program.setUniform('texture', texture);
          program.setUniform('world', world);

          device.drawIndexedPrimitives('TriangleList', 0, 6);
          
        }
      }
    });

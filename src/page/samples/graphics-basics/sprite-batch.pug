//- title: Sprite batch
//- weight: 9
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode
  a(name="JS" index=1)
  script(type='text/javascript').
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });
    
    var spriteBatch = device.createSpriteBatch();
    var texture1 = device.createTexture({ data: "/assets/textures/proto_red.png" });
    var texture2 = device.createTexture({ data: "/assets/textures/proto_green.png" });
    var texture3 = device.createTexture({ data: "/assets/textures/proto_blue.png" });
    var texture4 = device.createTexture({ data: "/assets/videos/big-buck-bunny.mp4" });
    texture4.video.play();
    
    var time = 0;
    Glib.utils.loop(function(dt){
      time += dt;
      var pulse = (Math.sin(2 * Math.PI * time / 2000) + 1) / 2;

      device.resize();
      device.clear(Glib.Color.CornflowerBlue, 1.0);
      device.blendState = Glib.Graphics.BlendState.AlphaBlend;

      spriteBatch.begin();

      var vw = device.viewportState.width
      var pad = vw * 0.025
      var size = vw * 0.3

      // red texture
      spriteBatch
        // begin a new sprite with texture
        // this returns a sprite builder object with chainable methods
        .draw(texture1)
        // set tint color
        .color(0xFFFFFFFF)
        // set alpha. should not be called before color is set
        .alpha(pulse) 
        // set destination rectangle in screen
        .destination(
          pad, 
          pad, 
          size, 
          size)


      // green texture
      spriteBatch
        .draw(texture2)
        .destination(
          pad + 1 * (size + pad) - pad * pulse,
          pad - pad * pulse,
          size + 2 * pad * pulse,
          size + 2 * pad * pulse)

      // blue texture
      spriteBatch
        .draw(texture3)
        // rotate the sprite
        .rotation(2 * Math.PI * time / 2000)
        // rotate around origin (normalized cooridnates)
        .origin(0.5, 0.5)
        .destination(
          pad + 2 * (size + pad),
          pad,
          size, 
          size)

      // video split 1
      spriteBatch
        .draw(texture4)
        // source rectanle
        .source(0, 0, texture4.width / 3, texture4.height)
        .destination(
          pad + 0 * (size + pad) + pad * pulse,
          pad + 1 * (size + pad),
          size, 
          size)

      // video split 2
      spriteBatch
        .draw(texture4)
        .source(texture4.width / 3, 0, texture4.width / 3, texture4.height)
        .destination(
          pad + 1 * (size + pad),
          pad + 1 * (size + pad),
          size, 
          size)

      // video split 3
      spriteBatch
        .draw(texture4)
        .source(2 * texture4.width / 3, 0, texture4.width / 3, texture4.height)
        .destination(
          pad + 2 * (size + pad) - pad * pulse,
          pad + 1 * (size + pad),
          size, 
          size)

      spriteBatch.end();
    });
    

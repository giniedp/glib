//- title: Loading OBJ Model
//- weight: 2
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode
  
  a(name="JS" index=1)
  script(type='text/javascript').

    Glib.Content.Pipeline.preloader('Effect', function(context) {
      // redirect the download path for basicEffect
      if (context.path === 'basicEffect') {
        context.sourceType = '.glfx'
        context.path = '/assets/shader/basicTextured.glfx'
      }
    });

    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });

    var content = new Glib.Content.Manager(device);
    var model = null;
    content.load("Model", "/assets/models/ghoul.obj").then(function(result) {
    //content.load("Model", "/assets/models/roundcube.obj").then(function(result) {
      model = result;
      console.log(model);
    })
    
    var world = Glib.Mat4.identity();
    var view = Glib.Mat4.identity();
    var proj = Glib.Mat4.identity();
    var cam = Glib.Mat4.identity();

    var time = 0;
    Glib.utils.loop(function(dt) {
      time += dt;
      let pulse = 2*Math.PI*time;

      device.resize();
      device.cullState = Glib.Graphics.CullState.CullCounterClockWise;
      device.depthState = Glib.Graphics.DepthState.Default;
      device.blendState = Glib.Graphics.BlendState.Opaque;
      device.clear(Glib.Color.CornflowerBlue, 1.0);
      
      world.initRotationY(time / 4000);
      world.translation[1] = -50;
      cam.initTranslation(0, 0, 150);
      Glib.Mat4.invert(cam, view);
      proj.initPerspectiveFieldOfView(Math.PI/2, device.drawingBufferAspectRatio, 1, 1000);

      if (model) {
        model.materials.forEach(function(material) {
          var params = material.parameters
          
          params.World = world;
          params.View = view;
          params.Projection = proj;
          params.EyePosition = cam.getTranslation();
          
          params.AlphaClip = 0.9;
          params.SpecularPower = 54;
          params.AmbientColor = [0.1, 0.1, 0.1];

          params.Lights0Color = [1, 1, 1, 1.5];
          params.Lights0Position = [Math.cos(pulse / 10000) * 50, 0, Math.sin(pulse / 10000) * 50];
          params.Lights0Direction = [0, 0, -1, 1];
          params.Lights0Misc = [
            1000, // point light range 
            0, 
            0, 
            1     // 1:dir light 2:point light
          ];
        })

        model.draw();
      }
    });

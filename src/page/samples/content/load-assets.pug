//- title: Loading Assets
//- weight: 1
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode
  
  a(name="MODEL" index=2)
  script(type="text/glib-asset" id="demo-model.json").
    {
      "materials": [
        "demo-material.json"
      ],
      "meshes": [{
        "material": 0,
        "indexCount": 6,
        "vertexCount": 4,
        "indexBuffer": {
          "dataType": "ushort",
          "data": [
            0,  1,  2,      0,  2,  3
          ]
        },
        "vertexBuffer": {
          "layout": {
            "position": { "type": "float", "offset": 0, "elements": 3 },
            "normal": { "type": "float", "offset": 12, "elements": 3 },
            "texture": { "type": "float", "offset": 24, "elements": 2 }
          },
          "dataType": "float",
          "data": [
            -1.0, -1.0,  0.0,     0, 0, 1,  0, 0,
            -1.0,  1.0,  0.0,     0, 0, 1,  0, 1,
             1.0,  1.0,  0.0,     0, 0, 1,  1, 1,
             1.0, -1.0,  0.0,     0, 0, 1,  1, 0
          ]
        }
      }]
    }
  a(name="MATERIAL" index=2)
  script(type="text/glib-asset" id="demo-material.json").
    {
      "effect": "demo-effect.glfx",
      "parameters": {
        "texture": "/assets/textures/proto_blue.png",
        "specularPower": 16
      }
    }
  a(name="EFFECT" index=2)
  script(type='text/glfx'  id="demo-effect.glfx").
    program:
      precision highp float;

      // @binding position
      attribute vec3 vPosition;
      // @binding normal
      attribute vec3 vNormal;
      // @binding texture
      attribute vec2 vTexture;

      // @binding world
      uniform mat4 uWorld;
      // @binding view
      uniform mat4 uView;
      // @binding projection
      uniform mat4 uProjection;

      // @binding texture
      uniform sampler2D uTexture;
      // @binding ambientColor
      // @default [0.2, 0.2, 0.2]
      uniform vec3 uAmbientColor;
      // @binding lightColor
      // @default [1, 1, 1]
      uniform vec3 uLightColor;
      // @binding lightDirection
      // @default [0, 0, -1]
      uniform vec3 uLightDirection;
      // @binding eyePosition
      // @default [0, 0, 1]
      uniform vec3 uEyePosition;
      // @binding specularPower
      // @default 16
      uniform float uSpecularPower;

      // data for fragment stage
      varying vec3 normal;
      varying vec3 position;
      varying vec2 texCoord;

      vec4 CalculateLightTerm(
        in vec3 E,   // Vector To Eye
        in vec3 N,   // Surface Normal
        in vec3 L,   // Vector To Light
        in vec3 LC,  // Light Color
        in float SP) // Specular Power
      {
        // diffuse term

        // float NdotL = max(0.0, dot(N, L));
        float NdotL = max(0.0, abs(dot(N, L))); // abs for backface
        vec4 result = vec4(NdotL * LC, 0.0);

        // specular term
        if (NdotL > 0.0)
        {
          vec3 H = normalize(E + L);
          result.a = pow(abs(dot(N, H)), SP);
        }
        return result;
      }
      
    technique:
      pass:
        vertexShader:
          void main(void) {
            vec4 pos = uWorld * vec4(vPosition, 1.0);
            normal = mat3(uWorld) * vNormal;
            position = pos.xyz;
            texCoord = vTexture;
            gl_Position = uProjection * uView * pos;
          }
        fragmentShader:
          void main(void) {
            vec4 term = CalculateLightTerm(uEyePosition - position, normal, -uLightDirection, uLightColor, uSpecularPower);
            vec4 color = texture2D(uTexture, texCoord);
            color.rgb = uLightColor * term.rgb * color.rgb + term.a * color.rgb + uAmbientColor;
            color.a = 1.0;  
            gl_FragColor = color;
          }

  a(name="JS" index=1)
  script(type='text/javascript').
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });
    var content = new Glib.Content.Manager(device);
    var model = null;

    content.load("Model", "demo-model.json").then(function(result) {
      model = result;
      console.log(model);
    })
    
    var world = Glib.Mat4.identity();
    var view = Glib.Mat4.identity();
    var proj = Glib.Mat4.identity();
    var time = 0;
    Glib.utils.loop(function(dt) {
      time += dt;

      device.resize();
      device.cullState = Glib.Graphics.CullState.CullNone;
      device.clear(Glib.Color.CornflowerBlue, 1.0);
      
      world.initRotationY(time / 1000);
      view.initTranslation(0, 0, -2);
      var aspect = device.context.drawingBufferWidth / device.context.drawingBufferHeight;  
      proj.initPerspectiveFieldOfView(Math.PI/2, aspect, 0, 100);

      if (model) {
        var material = model.materials[0]
        var params = material.parameters
        params.world = world
        params.view = view
        params.projection = proj
        params.eyePosition = { x: 0, y: 0, z: 2 }
        model.draw();
      }
    });

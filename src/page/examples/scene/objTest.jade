extends ./../../_layouts/example.jade
block script
  script(type='text/javascript').
    function DemoComponent(options) {
      options = options || {};
      this.index = options.index || 0;
      this.enable = true;
      this.visible = true;
    }
    DemoComponent.prototype.setup = function () {
      this.time = this.node.root.getService("Time");
      this.assets = this.node.root.getService("Assets");
      this.transform = this.node.getService("Transform");
      this.renderable = this.node.getService("Renderable");
      console.log(this.assets)
      this.assets
        .loadAssets({
          Model: {
            cube: "/assets/models/roundcube.obj",
            capsule: "/assets/models/capsule.obj"
          }
        })
        .then(function (res) {
          this.renderable.model = res.Model.cube;
        }.bind(this));
    };
    DemoComponent.prototype.update = function (time) {
      //this.transform.setRotationXYZAngle(0, 1, 0, -Math.PI / 2);
      //return;
      var s = this.index / totalItems;
      var t = (s + this.time.totalMsInGame / 3000) * Math.PI * 2;
      var x = Math.sin(s * Math.PI * 2) * 5;
      var y = Math.cos(s * Math.PI * 2) * 5;

      this.transform.setPositionXYZ(x, y, Math.sin(t) * 2 - 10);
      this.transform.setScaleUniform(0.75 + Math.sin(t) * 0.25);
      this.transform.setRotationXYZAngle(0, 1, 0, t);
    };

    game = Glib
      .createGame({
        canvas: document.getElementById("canvas"),
        autorun: true
      })
      .buildChild({
        name: "Camera",
        templates: ["Camera", "WASD"]
      }, function (entity) {
        entity.getService("Camera").activate();
        entity.getService("Transform").translateXYZ(0, 0, 5);
      })
      .buildChild({
        name: "Light",
        templates: ["DirectionalLight"]
      });
    
    var totalItems = 12;
    for (var i = 1; i <= totalItems; i++) {
      game.buildChild({
        name: "Model" + i,
        templates: ["Model"]
      }, function (entity) {
        entity.addComponent(new DemoComponent({index: i}));
      });
    }
